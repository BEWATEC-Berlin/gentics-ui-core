// The GIT repository for this pipeline lib is defined in the global Jenkins setting
@Library('jenkins-pipeline-library')
import com.gentics.*

// Make the helpers aware of this jobs environment
JobContext.set(this)

pipeline {
	agent {
		kubernetes {
			label env.BUILD_TAG
			defaultContainer 'build'
			yaml """
apiVersion: v1
kind: Pod
spec:
  nodeSelector:
    jenkins_worker: true
  volumes:
    - name: cache
      hostPath:
        path: /opt/kubernetes/cache
  containers:
  - name: build
    image: docker:18
    imagePullPolicy: Always
    command:
      - cat
    tty: true
    resources:
      requests:
        cpu: 2
        memory: 4Gi
    env:
      - name: DOCKER_HOST
        value: tcp://127.0.0.1:2375
    volumeMounts:
      - mountPath: /root/.npm/_cacache
        name: cache
        subPath: npm/_cacache
  - name: docker
    image: docker:18-dind
    imagePullPolicy: Always
    args:
      - '--storage-driver=overlay2'
    securityContext:
      privileged: true
    tty: true
  imagePullSecrets:
    - name: docker-jenkinsbuilds-apa-it
"""
		}
	}

	environment { 
		VERSION_CONSTRAINT = /^((([0-9]+)\.([0-9]+)\.([0-9]+)(?:-([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?)(?:\+([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?)$/
	}

	options {
		gitLabConnection('git.gentics.com')
		gitlabBuilds(builds: ['Jenkins build'])
		timestamps()
		timeout(time: 1, unit: 'HOURS')
		ansiColor('xterm')
	}

	parameters {
		booleanParam(name: 'linting', defaultValue: false,  description: 'Whether to run linting')
		booleanParam(name: 'testing', defaultValue: true,  description: 'Whether to run unit tests')
		string(name: 'releaseVersion', defaultValue: '',  description: 'Version must comply with semver, a tag will be created, cannot be the same as in package.json')
		booleanParam(name: 'release', defaultValue: false, description: "Whether to run the release steps")
		booleanParam(name: 'releaseNext', defaultValue: false, description: "Whether release as an upcoming version")
		booleanParam(name: 'publishDocs', defaultValue: false,  description: 'Build docs app and uploads to Github Pages')
		string(name: 'docsVersion', defaultValue: '',  description: 'If empty, its auto-detected, otherwise version of the maintenance documentation')
	}

	stages {
		stage('Clone Github Pages') {
			when {
            	beforeAgent true
            	expression {
                    return params.publishDocs
                }
        	}

			steps {
				dir('docs') {
	       			git branch: 'gh-pages',
	       				credentialsId: 'git',
	       				url: env.GIT_URL
	    		}
    		}
		}

		stage('Docker build') {
			when {
            	beforeAgent true
            	expression {
                    isValidVersion = params.releaseVersion.trim() =~ env.VERSION_CONSTRAINT || params.releaseVersion == ''
                    return isValidVersion
                }
        	}

			steps {
				sh """docker build -f ci/Dockerfile \
						--build-arg linting=${params.linting} \
						--build-arg testing=${params.testing} \
						--build-arg release=${params.release} \
						--build-arg releaseNext=${params.releaseNext} \
						--build-arg releaseVersion=${params.releaseVersion} \
						--build-arg publishDocs=${params.publishDocs} \
						--build-arg docsVersion=${params.docsVersion} \
						--build-arg GIT_BRANCH=${env.GIT_BRANCH} \
						--build-arg CACHEBUST=\$(date +%s) \
						.
				"""
			}
		}

		stage('Publish Docs to Github Pages') {
			when {
            	expression {
                    return params.publishDocs
                }
        	}

			steps {
				echo "Now it should publish..."
    		}
		}
	}

  	post {
		always {
			//updateGitlabCommitCurrentBuildStatus name: 'Jenkins build'
			notifyMattermostUsers()
		}
	}
}
